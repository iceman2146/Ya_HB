/* 
  ┌─────────────────────────────────────────────────────────────────────────┐
  │ Вагоны                                                                  │
  ├─────────────────────────────────────────────────────────────────────────┤
  │ Вы — машинист. Вам поручено реализовать функцию void MakeTrain(),       │
  │ чтобы сформировать поезд из набора                                      │
  │ вагонов.                                                                │
  │ У каждого вагона есть номер (помещается в int). Номера вагонов внутри   │
  │ состава могут повторяться. Изначально путь, на котором формируется      │
  │ состав, пустой. Вы должны уметь выполнять следующие команды, которые    │
  │ поступают в отдельных строках на входе:                                 │
  │     * +left W — добавить вагон с номером W слева                        │
  │     * +right W — добавить вагон с номером W справа                      │
  │     * -left N — отцепить и убрать N вагонов слева                       │
  │     * -right N — отцепить и убрать N вагонов справа                     │
  │ В последних двух командах N может быть больше текущей длины состава —   │
  │ в этом случае надо убрать весь состав целиком. Отцеплять вагоны по      │
  │ одному может быть долго: постарайтесь сразу отцеплять по N штук.        │
  │ Напечатайте через пробел номера вагонов получившегося состава, если     │
  │ смотреть на них слева направо. В самом конце напечатайте перевод        │
  │ строки.                                                                 │
  │ На вход подаются строки с командами в указанном формате. Всего будет    │
  │ не более 1 млн команд. Оформите ваше решение в функции void             │
  │ MakeTrain(). Эта функция должна читать данные со стандартного потока    │
  │ ввода и печатать их в стандартный поток вывода. Подключите все          │
  │ необходимые библиотеки. В вашем решении не должно быть функции          │
  │ main.                                                                   │
  └─────────────────────────────────────────────────────────────────────────┘
 */
#include <deque>
#include <iostream>
#include <string>
void MakeTrain();
int main()
{
    MakeTrain();
    return 0;
}
void MakeTrain()
{
   
    std::deque<int> Train;
 
    std::string command;
    int wagon_number;
    size_t k;
    while (std::cin >> command) {
        if (command == "+left") {
            std::cin >> wagon_number;
            Train.push_front(wagon_number);
        } else if (command == "+right") {
            std::cin >> wagon_number;
            Train.push_back(wagon_number);
        } else if (command == "-left") {
            std::cin >> k;
            k = std::min(k, Train.size());
            Train.erase(Train.begin(), Train.begin() + k);
        } else if (command == "-right") {
            std::cin >> k;
            k = std::min(k, Train.size());
            Train.erase(Train.end() - k, Train.end());
        }
    }
 
    for (const auto& wagon_number : Train) {
        std::cout << wagon_number << " ";
    }
    std::cout << "\n";
}